{
	"info": {
		"_postman_id": "dcf35c66-457f-4393-ab94-86e2260074fe",
		"name": "Trello collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "POST CreateNewBoard",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"  let jsonData = pm.response.json();\r",
							"pm.test(\"Board is created\", function () {  \r",
							"    pm.expect(jsonData.name).to.eql(pm.variables.get(\"boardName\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Board is private\", function () {  \r",
							"    pm.expect(jsonData.prefs.permissionLevel).to.eql(\"private\");\r",
							"});\r",
							"\r",
							"pm.environment.set(\"boardID\", pm.response.json().id);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// const boardName = \"Traning \" + Math.floor(Math.random() * 11);\r",
							"// console.log(boardName)\r",
							"// pm.variables.set(\"Name\", boardName);\r",
							"// Use currentBoardNumber to store the board number\r",
							"var currentBoardNumber = pm.environment.get(\"currentBoardNumber\");\r",
							"console.log(currentBoardNumber)\r",
							"\r",
							"// Check if currentBoardNumber is already defined \r",
							"if (currentBoardNumber) {\r",
							"    currentBoardNumber++; // increment\r",
							"} else {\r",
							"    currentBoardNumber = 1; // start from 1\r",
							"}\r",
							"\r",
							"\r",
							"var boardName = \"My board \" + currentBoardNumber;\r",
							"\r",
							"// Set the boardName for the request\r",
							"pm.environment.set(\"boardName\", boardName);\r",
							"\r",
							"// Set the currentBoardNumber for future requests\r",
							"pm.environment.set(\"currentBoardNumber\", currentBoardNumber);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://api.trello.com/1/boards/?name={{boardName}}&defaultLists=false&key={{trelloKey}}&token={{trelloToken}}",
					"protocol": "https",
					"host": [
						"api",
						"trello",
						"com"
					],
					"path": [
						"1",
						"boards",
						""
					],
					"query": [
						{
							"key": "name",
							"value": "{{boardName}}"
						},
						{
							"key": "defaultLists",
							"value": "false"
						},
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Recently CreatedNewBoard",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.trello.com/1/boards/{{boardID}}?key={{trelloKey}}&token={{trelloToken}}",
					"protocol": "https",
					"host": [
						"api",
						"trello",
						"com"
					],
					"path": [
						"1",
						"boards",
						"{{boardID}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "POST CreateNewList (DONE)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"  var jsonData = pm.response.json();\r",
							"pm.test(\"List is created\", function () {  \r",
							"    pm.expect(jsonData.name).to.eql(\"DONE\");\r",
							"});\r",
							"\r",
							"pm.test(\"Is closed eql false\", function () {  \r",
							"    pm.expect(jsonData.closed).to.eql(false);\r",
							"})\r",
							"\r",
							"let boardID = pm.environment.get(\"boardID\")\r",
							"pm.test(\"Is Created in specified board\", function () {   \r",
							"    pm.expect(jsonData.idBoard).to.eql(boardID);\r",
							"})\r",
							"\r",
							"pm.collectionVariables.set('listID_DONE', pm.response.json().id)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://api.trello.com/1/lists?name=DONE&idBoard={{boardID}}&key={{trelloKey}}&token={{trelloToken}}",
					"protocol": "https",
					"host": [
						"api",
						"trello",
						"com"
					],
					"path": [
						"1",
						"lists"
					],
					"query": [
						{
							"key": "name",
							"value": "DONE"
						},
						{
							"key": "idBoard",
							"value": "{{boardID}}"
						},
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "POST CreateNewList (ToDo)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"  var jsonData = pm.response.json();\r",
							"pm.test(\"List is created\", function () {  \r",
							"    pm.expect(jsonData.name).to.eql(\"TODO\");\r",
							"});\r",
							"\r",
							"pm.test(\"Is closed eql false\", function () {  \r",
							"    pm.expect(jsonData.closed).to.eql(false);\r",
							"})\r",
							"pm.collectionVariables.set('listID_TODO', pm.response.json().id)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"61bdca0e8f43ef643bad87fe\",\r\n    \"name\": \"TODO\"\r\n}",
					"options": {
						"raw": {
							"language": "javascript"
						}
					}
				},
				"url": {
					"raw": "https://api.trello.com/1/lists?name=TODO&idBoard={{boardID}}&key={{trelloKey}}&token={{trelloToken}}",
					"protocol": "https",
					"host": [
						"api",
						"trello",
						"com"
					],
					"path": [
						"1",
						"lists"
					],
					"query": [
						{
							"key": "name",
							"value": "TODO"
						},
						{
							"key": "idBoard",
							"value": "{{boardID}}"
						},
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "POST CreateNewCard",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"  var jsonData = pm.response.json();\r",
							"pm.test(\"created is created\", function () {  \r",
							"    pm.expect(jsonData.name).to.eql(\"Learn Postman\");\r",
							"});\r",
							"\r",
							"pm.test(\"Is closed eql false\", function () {  \r",
							"    pm.expect(jsonData.closed).to.eql(false);\r",
							"})\r",
							"\r",
							"pm.collectionVariables.set('cardID', pm.response.json().id)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.trello.com/1/cards?idList={{listID_DONE}}&name=Learn Postman&key={{trelloKey}}&token={{trelloToken}}",
					"protocol": "https",
					"host": [
						"api",
						"trello",
						"com"
					],
					"path": [
						"1",
						"cards"
					],
					"query": [
						{
							"key": "idList",
							"value": "{{listID_DONE}}"
						},
						{
							"key": "name",
							"value": "Learn Postman"
						},
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "POST UpdateNewCard (Move to ToDo)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"  var jsonData = pm.response.json();\r",
							"pm.test(\"created is created\", function () {  \r",
							"    pm.expect(jsonData.name).to.eql(\"Learn Postman\");\r",
							"});\r",
							"\r",
							"pm.test(\"Is closed eql false\", function () {  \r",
							"    pm.expect(jsonData.closed).to.eql(false);\r",
							"})\r",
							"\r",
							"pm.collectionVariables.set('cardID', pm.response.json().id)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.trello.com/1/cards/{{cardID}}?idList={{listID_TODO}}&key={{trelloKey}}&token={{trelloToken}}",
					"protocol": "https",
					"host": [
						"api",
						"trello",
						"com"
					],
					"path": [
						"1",
						"cards",
						"{{cardID}}"
					],
					"query": [
						{
							"key": "idList",
							"value": "{{listID_TODO}}"
						},
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "POST UpdateBoardName",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"  let jsonData = pm.response.json();\r",
							"pm.test(\"Board name is updated\", function () {  \r",
							"    pm.expect(jsonData.name).to.eql(\"Updated Traning Name\");\r",
							"    pm.expect(jsonData.name).to.not.be.eql(\"Traning\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Updated Traning Name\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.trello.com/1/boards/{{boardID}}?key={{trelloKey}}&token={{trelloToken}}",
					"protocol": "https",
					"host": [
						"api",
						"trello",
						"com"
					],
					"path": [
						"1",
						"boards",
						"{{boardID}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET DeleteBoard",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.environment.set(\"GET DeleteBoard\", pm.info.requestId);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://api.trello.com/1/boards/{{boardID}}?key={{trelloKey}}&token={{trelloToken}}",
					"protocol": "https",
					"host": [
						"api",
						"trello",
						"com"
					],
					"path": [
						"1",
						"boards",
						"{{boardID}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET BoardIsDeleted",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.trello.com/1/boards/{{boardID}}?key={{trelloKey}}&token={{trelloToken}}",
					"protocol": "https",
					"host": [
						"api",
						"trello",
						"com"
					],
					"path": [
						"1",
						"boards",
						"{{boardID}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET All_Boards",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"var testBoard = jsonData.pop();\r",
							"\r",
							"const response = pm.response.json();\r",
							"const workBoard = response.find(board => board.name === \"Max Work Dashboard\");\r",
							"console.log(workBoard.id);\r",
							"\r",
							"if (testBoard && testBoard.id != workBoard.id) {   \r",
							"    // console.log(testBoard.id);   \r",
							"    // Set the variable boardId with the first board id from the list retrieved\r",
							"    pm.environment.set(\"boardID\", testBoard.id);    \r",
							"    // Set the next request to the delete board\r",
							"    postman.setNextRequest(pm.environment.get(\"GET DeleteBoard\"));\r",
							"} else {\r",
							"    // Stop loop if only 'Max Work Dashboard' left\r",
							"    postman.setNextRequest(null);\r",
							"\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"    pm.environment.unset(\"boardName\");\r",
							"    pm.environment.unset(\"currentBoardNumber\");\r",
							"    pm.environment.unset(\"boardID\")\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.trello.com/1/members/maksymm6/boards?key={{trelloKey}}&token={{trelloToken}}",
					"protocol": "https",
					"host": [
						"api",
						"trello",
						"com"
					],
					"path": [
						"1",
						"members",
						"maksymm6",
						"boards"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "listID_DONE",
			"value": ""
		},
		{
			"key": "listID_TODO",
			"value": ""
		},
		{
			"key": "cardID",
			"value": ""
		}
	]
}